// <auto-generated />
using System;
using JobApplicationWebsite_Project.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobApplicationWebsite_Project.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HRStaffID")
                        .HasColumnType("int");

                    b.Property<int?>("JobPostingId")
                        .HasColumnType("int");

                    b.Property<int?>("PostingID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobPostingId");

                    b.ToTable("company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "LGA TELECOM PTE LTD",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(7707),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(7716),
                            Description = "As one of the industry’s digital pioneers, LGA has been helping shape Singapore’s digital ecosystem since 1995, starting first as a Digital Service Provider to now providing full digital solutions for businesses throughout Singapore.",
                            HRStaffID = 1,
                            PostingID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "ALVAS FOOD MANUFACTURE PTE LTD",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(7723),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(7724),
                            Description = "ALVAS FOOD MANUFACTURE PTE. LTD. is located in Singapore, Singapore and is part of the Dairy Product Manufacturing Industry. ALVAS FOOD MANUFACTURE PTE. LTD. has 8 total employees across all of its locations. (Employees figure is modelled).",
                            HRStaffID = 2,
                            PostingID = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "ADECCO PERSONNEL PTE LTD",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(7727),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(7728),
                            Description = "For more than 35 years, Adecco provides a comprehensive array of HR solutions and consulting services which includes mid to staff level talentacquisition, contract recruitment, outsourcing, field sales and marketing as well as payroll services.Our expertise includes accounting & finance, admin & secretarial, banking, digital & eCommerce. ",
                            HRStaffID = 3,
                            PostingID = 3,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.IndividSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mastery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsofExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IndividSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(2966),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(2976),
                            Mastery = "novice",
                            SkillName = "baking",
                            UpdatedBy = "System",
                            YearsofExperience = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(2981),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(2982),
                            Mastery = "expert",
                            SkillName = "Fixing",
                            UpdatedBy = "System",
                            YearsofExperience = 10
                        });
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobPostingID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserNameId")
                        .HasColumnType("int");

                    b.Property<string>("UserResume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobPostingID");

                    b.HasIndex("UserNameId");

                    b.ToTable("JobApplications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "very good",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(8352),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(8363),
                            JobPostingID = 1,
                            UpdatedBy = "System",
                            UserResume = "",
                            User_Name = "Luong Hao Wen"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "very good",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(8368),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 498, DateTimeKind.Local).AddTicks(8370),
                            JobPostingID = 2,
                            UpdatedBy = "System",
                            UserResume = "Very good at comptur mr ngiam",
                            User_Name = "Yew Yong Chank"
                        });
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.JobPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Benefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfMonths")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfYears")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsiblity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobPosting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Benefits = "Health Insurance , Paid time off , Life inusrance",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(5383),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(5394),
                            NumberOfMonths = 3,
                            NumberOfYears = 2,
                            Position = "Digital Media Production Assistant",
                            Responsiblity = "Assist with all social media department logistics such as platform scheduling, copywriting, content calendar reviews, and posting support.Assist with production of social content shoots  including being on - set for photo and video shoots supporting where necessary",
                            Salary = 2500,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            Benefits = "Mental Health Benfits , Flexible work arrangements",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(5400),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(5401),
                            NumberOfMonths = 1,
                            NumberOfYears = 2,
                            Position = "Office Administrator",
                            Responsiblity = "Independently run the office space on a day-to-day basis to ensure smooth operations,Attend to incoming calls via the main phone line via a mobile application ,Liaise with appointed vendors and building management to perform regular routine office ",
                            Salary = 2800,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            Benefits = "Paid time off",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(5404),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(5405),
                            NumberOfMonths = 0,
                            NumberOfYears = 3,
                            Position = "Delivery Driver",
                            Responsiblity = "Loading up and counting of stocks before going out for delivery and counting balance of stocks when deliveries are done, place balance of stocks back intofactory's chillers at the end of the day. Main delivery route will be to NTUC and Giant outlets.",
                            Salary = 2600,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("User_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Resume");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Certificates = "Profesional ceritication of professional Achievment in Digital Media",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Education = "Degree of  BSc Digital Media ",
                            School = "Singapore of Social Science",
                            User_Name = "Luong Hao Wen"
                        },
                        new
                        {
                            Id = 2,
                            Certificates = "Food Hygiene certificate , MITx Manufacturing Program ",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Education = "Diploma in Food Science",
                            School = "Singapore Polytechnic",
                            User_Name = "Dai Koi Yim"
                        },
                        new
                        {
                            Id = 3,
                            Certificates = "Certificate of High Achievment in 3D modelling",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Education = "Higher Nitec in Electronics",
                            School = "ITE Central",
                            User_Name = "Danial bin Sulfian"
                        });
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobPostingID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserNameId")
                        .HasColumnType("int");

                    b.Property<string>("User_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobPostingID");

                    b.HasIndex("UserNameId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 495, DateTimeKind.Local).AddTicks(5816),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 496, DateTimeKind.Local).AddTicks(9399),
                            JobPostingID = 1,
                            Rating = 3,
                            ReviewComment = "As soon as COVID-19 was getting serious, Indeed was one of the first companies to implement a mandatory work-from-home policy. Our healthy and safety came first, and I felt so lucky our company had the opportunity to make that decision. Since the WFH policy, our CEO, COO, and SVP of HR have been INCREDIBLE with transparency, being here for us and communicating to us more than I've ever seen.",
                            UpdatedBy = "System",
                            User_Name = "Jim Jimson"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(712),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 497, DateTimeKind.Local).AddTicks(719),
                            JobPostingID = 2,
                            Rating = 4,
                            ReviewComment = "We have unlimited PTO, and we are encouraged to take it. 401K match up to 3%. Great healthcare plan. Our NYC office is beautiful with fully stocked drinks and snacks. There's a gym and multiple terraces.  We have company happy hours once a month and our holiday parties are OUTSTANDING. ",
                            UpdatedBy = "System",
                            User_Name = "Danial Bin Sulfian"
                        });
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.SkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndividSkillsID")
                        .HasColumnType("int");

                    b.Property<int?>("JobPostingId")
                        .HasColumnType("int");

                    b.Property<int>("PostingID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividSkillsID");

                    b.HasIndex("JobPostingId");

                    b.ToTable("SkillSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(9953),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(9961),
                            IndividSkillsID = 1,
                            PostingID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(9965),
                            DateUpdated = new DateTime(2022, 2, 5, 18, 20, 38, 499, DateTimeKind.Local).AddTicks(9967),
                            IndividSkillsID = 2,
                            PostingID = 2,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "126@gmail.com",
                            Age = 23,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lonk How Wank",
                            Password = "Password1",
                            UserName = "username111"
                        },
                        new
                        {
                            Id = 2,
                            Address = "127@gmail.com",
                            Age = 23,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngiam Fabian",
                            Password = "Password2",
                            UserName = "username222"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.Company", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.JobApplication", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.User", "UserName")
                        .WithMany()
                        .HasForeignKey("UserNameId");

                    b.Navigation("JobPosting");

                    b.Navigation("UserName");
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.Resume", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.Review", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.User", "UserName")
                        .WithMany()
                        .HasForeignKey("UserNameId");

                    b.Navigation("JobPosting");

                    b.Navigation("UserName");
                });

            modelBuilder.Entity("JobApplicationWebsite_Project.Shared.Domain.SkillSet", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.IndividSkills", "IndivSkills")
                        .WithMany()
                        .HasForeignKey("IndividSkillsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobApplicationWebsite_Project.Shared.Domain.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId");

                    b.Navigation("IndivSkills");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobApplicationWebsite_Project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobApplicationWebsite_Project.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
