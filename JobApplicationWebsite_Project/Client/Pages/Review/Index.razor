@page "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize] 

<h3 class="card-title">Job Review</h3>
<br />
<a href="/reviews/Create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Review
</a>
<br />
<br />

@if (Reviews == null)
{
 <div class=" alert alert-info">Loading reviews</div>
}
else 
{ <table class="table table-responsive">
	<thead>
		<tr>
			<th>Review ID</th>
			<th>Comment</th>
			<th>Rating</th>
			<th>User ID</th>
			<th>Job Postings ID</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var review in Reviews)
		{
			<tr>
				<td> @review.Id</td>
				<td>@review.ReviewComment</td>
				<td>@review.Rating</td>
				<td>@review.UserID</td>
				<td>@review.JobPostingID</td>
				<td>
					<a href="/Reviews/view/@review.Id" class="btn btn-primary">
						<span class="oi oi-book"></span>
					</a>
					<a href="/Reviews/edit/@review.Id" class="btn btn-warning">
						<span class="oi oi-pencil"></span>
					</a>
					<button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
						<span class="oi oi-delete"></span>
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>
}


@code {
    private List<Review> Reviews;

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoint.ReviewEndpoint}");
    }
    async Task Delete(int reviewID)
    {
        var review = Reviews.First(q => q.Id == reviewID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Id}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoint.ReviewEndpoint}/{reviewID}");
            await OnInitializedAsync();
        }
    }

}
