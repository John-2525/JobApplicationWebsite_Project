@page "/resumes/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor

<h3 class="card-title">Resume</h3>
<a href="/resumes/Create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Job Posting
</a>
<br />
<br />
@if (Resumes == null)
{
    <div class="alert alert-info"> Loading Resumes...</div>
}
else
{
    <table class="table table-responsive" id="resumeTable">
        <thead>
            <tr>
                <th>Resume ID</th>
                <th>User ID</th>
                <th>School</th>
                <th>Education Level</th>
                <th>Certification</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>

        </thead>
        <tbody>
            @foreach (var resumes in Resumes)
            {
                <tr>
                    <td>@resumes.Id </td>
                    <td>@resumes.User_Name</td>
                    <td>@resumes.School</td>
                    <td>@resumes.Education</td>
                    <td>@resumes.Certificates</td>
                    <td><iframe src="@resumes.Description" width="810" height="400"></iframe></td>
                    <td>
                        <a href="/resumes/view/@resumes.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/resumes/edit/@resumes.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(resumes.Id))">

                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    private List<Resume> Resumes;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Resumes = await _client.GetFromJsonAsync<List<Resume>>($"{Endpoint.ResumeEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#resumeTable");

    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#resumeTable");
    }

    async Task Delete(int resumesId)
    {
        var resumes = Resumes.First(q => q.Id == resumesId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {resumes.Id}? ");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoint.ResumeEndpoint}/{resumesId}");
            await OnInitializedAsync();
        }
    }

}
